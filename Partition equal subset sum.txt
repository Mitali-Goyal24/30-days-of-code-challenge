class Solution {
public:

    bool result(int index, vector<int>& arr , int n , int target , vector<vector<int>>& dp){
        if(index >=n){
            return 0;
        }
        if(target<0){
            return 0;
        }
        if(target==0){
            return 1;
        }
        
        if(dp[index][target] != -1){
            return dp[index][target];
        }

        bool incl = result(index+1 , arr , n , target - arr[index] , dp);
        bool excl = result(index+1 , arr , n , target - 0 , dp);

        return dp[index][target] = incl or excl;
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total = 0;
        for(int i=0 ; i<n ; i++){
            total +=nums[i];
        }
        if(total%2 != 0){
            return 0;
        }
        int target = total/2;

        vector<vector<int>> dp(n,vector<int>(target+1 , -1));
        return result(0, nums, n , target , dp);
    }
};